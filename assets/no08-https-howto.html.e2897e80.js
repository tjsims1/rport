import{_ as e,o as t,c as i,d as r}from"./app.0ebb67ef.js";const n={},s=r(`<h1 id="securing-the-rportd-api-with-https" tabindex="-1"><a class="header-anchor" href="#securing-the-rportd-api-with-https" aria-hidden="true">#</a> Securing the Rportd API with HTTPS</h1><p>Rportd supports HTTPS without the need for a reverse proxy. Open the <code>rportd.conf</code> file and enter the path to a certificate or certificate chain and a server key. The key must not be password protected.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[api]
  ## Defines the IP address and port the API server listens on
  ## specify non-empty {address} to enable API support
  address = &quot;0.0.0.0:3000&quot;
  ## ..snip ...snap
  ## If both cert_file and key_file are specified, then rportd will use them to serve the API with https.
  ## Intermediate certificates should be included in cert_file if required.
  #cert_file = &quot;/var/lib/rport/server.crt&quot;
  #key_file = &quot;/var/lib/rport/server.key&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a <code>cert_file</code> and a <code>key_file</code> are specified, the protocol automatically switches from HTTP to HTTPs.</p><p>If the IP address of your server has a public domain name you can generate a free certificate quite easily using Let&#39;s encrypt.</p><p>Make sure no other software is using the TCP port 80 during the certificate generation and your firewall is not blocking access to TCP 80.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DOMAIN=&lt;YOUR_DOMAIN&gt;
apt install certbot
certbot certonly -d $DOMAIN -n --agree-tos --standalone -m &lt;YOUR_EMAIL&gt;
# Change group ownerships so rport can read the files
chgrp rport /etc/letsencrypt/archive/
chmod g+rx /etc/letsencrypt/archive/
chgrp rport /etc/letsencrypt/live/
chmod g+rx /etc/letsencrypt/live/
chgrp rport /etc/letsencrypt/archive/$DOMAIN/
chmod g+rx /etc/letsencrypt/archive/$DOMAIN/
chgrp rport /etc/letsencrypt/archive/$DOMAIN/privkey1.pem
chmod g+rx /etc/letsencrypt/archive/$DOMAIN/privkey1.pem
chgrp rport /etc/letsencrypt/live/$DOMAIN/
ls -l /etc/letsencrypt/live/$DOMAIN/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will create the server key, certificates, and chains in <code>/etc/letsencrypt/live/$DOMAIN/</code>. Note that the files and folders generated by certbot are readable only by root. So change your ownerships accordingly.</p><p>Now set up your <code>rportd.conf</code> like this.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[api]
  ## Defines the IP address and port the API server listens on
  ## specify non-empty {address} to enable API support
  address = &quot;0.0.0.0:3000&quot;
  ## ..snip ...snap
  ## If both cert_file and key_file are specified, then rportd will use them to serve the API with https.
  ## Intermediate certificates should be included in cert_file if required.
  cert_file = &quot;/etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/fullchain.pem&quot;
  key_file = &quot;/etc/letsencrypt/live/&lt;YOUR_DOMAIN&gt;/privkey.pem&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Restart rportd after any changes to the configuration file. Check your SSL setup is working properly by executing <code>curl -Iv -u admin:foobaz https://$DOMAIN:3000/api/v1/status</code>. You should not get any errors.</p><p>On Ubuntu a systemd timer to renew the certificates every 12 hours is created on the installation of the certbot package. For details look at <code>/etc/systemd/system/timers.target.wants/certbot.timer</code>. On other distribution you might set up a cron manually that executes <code>certbot -q renew</code> every 12 hours.</p>`,12),c=[s];function a(d,l){return t(),i("div",null,c)}var p=e(n,[["render",a],["__file","no08-https-howto.html.vue"]]);export{p as default};
